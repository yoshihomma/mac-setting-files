{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"func:parse_args": {
		"prefix": "parse_args",
		"body": [
			"def parse_args():",
			"    parser = argparse.ArgumentParser()",
			"    parser.add_argument('$1')",
			"    args = parser.parse_args()",
			"    return args",
			"",
		],
		"description": "Snippet for main function."
	},
	"parser.add_argument": {
		"prefix": "add_argument",
		"body": [
			"parser.add_argument('$1')",
		],
		"description": "Snippet for main function."
	},
	"pdb": {
		"prefix": "pdb",
		"body": [
			"import pdb",
			"pdb.set_trace()",
			"pass",
		],
		"description": "Snippet for main function."
	},
	"main": {
		"prefix": "main",
		"body": [
			"def main():$1",
			"",
			"",
			"if __name__ == '__main__':",
			"    main()",
			"",
		],
		"description": "Snippet for main function."
	},
	"todo:test_code": {
		"prefix": "todotest",
		"body": [
			"# TODO: write a test code",
		],
		"description": "Snippet for TODO comment of a test code"
	},
	"pytorch:module": {
		"prefix": "module",
		"body": [
			"class $1(nn.Module):",
			"    def __init__(self):",
			"        super($1, self).__init__()",
			"",
			"    def forward(self, x):",
			"        $2",
		],
		"description": "Snippet for module in PyTorch."
	},
}